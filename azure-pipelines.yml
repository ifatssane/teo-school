trigger:
  paths:
    exclude:
    - scripts/infrastructure
    - scripts/pipelines
variables:
  tags: $(Build.Buildid)
stages:
- stage: CI
  displayName: 'Continuous Integration'
  jobs:
  - job: Job_1
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      clean: true
    - task: Docker@2
      displayName: Build RNG
      condition: succeededOrFailed()
      inputs:
        containerRegistry: 'dockercoinsacr'
        repository: jaouadifatssane/RNG
        command: buildAndPush
        Dockerfile: rng/Dockerfile
        tags: $(tags)
    - task: Docker@2
      displayName: Build Hacher
      condition: succeededOrFailed()
      inputs:
        containerRegistry: 'dockercoinsacr'
        repository: jaouadifatssane/hacher
        command: buildAndPush
        Dockerfile: hasher/Dockerfile
        tags: $(tags)
    - task: Docker@2
      displayName: Build Worker
      condition: succeededOrFailed()
      inputs:
        containerRegistry: 'dockercoinsacr'
        repository: jaouadifatssane/worker
        command: buildAndPush
        Dockerfile: worker/Dockerfile
        tags: $(tags)
    - task: Docker@2
      displayName: Build Webui
      condition: succeededOrFailed()
      inputs:
        containerRegistry: 'dockercoinsacr'
        repository: jaouadifatssane/webui
        command: buildAndPush
        Dockerfile: webui/Dockerfile
        tags: $(tags)

- stage: DeployDev
  displayName: 'Deploy to Dev env'
  dependsOn: CI
  jobs:
  - deployment: dev_deploy
    pool:
      vmImage: ubuntu-latest
    environment: 'DevEnv'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self 
            - task: replacetokens@5
              displayName: Replace tokens
              inputs:
                targetFiles: '**/*-deployment.yml'
                encoding: 'auto'
                tokenPattern: 'default'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                actionOnNoFiles: 'warn'
                enableTransforms: false
                enableRecursion: false
                useLegacyPattern: false
                enableTelemetry: true

            - task: KubernetesManifest@0
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-connection-service'
                secretType: 'dockerRegistry'
                dockerRegistryEndpoint: 'dockercoinsacr'

            - task: KubernetesManifest@0
              inputs:
                  action: 'deploy'
                  kubernetesServiceConnection: 'aks-connection-service'
                  manifests: '/scripts/K8S/*-deployment.yml'